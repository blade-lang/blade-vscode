{
  "fileTypes": [
    "bladeLang"
  ],
  "foldingStartMarker": "\\{\\s*$",
  "foldingStopMarker": "^\\s*\\}",
  "name": "Blade",
  "patterns": [
    {
      "begin": "^\\w*\\b(import)\\b",
      "beginCaptures": {
        "0": {
          "name": "keyword.other.import.bladeLang"
        }
      },
      "end": "\n",
      "endCaptures": {
        "0": {
          "name": "punctuation.terminator.bladeLang"
        }
      },
      "name": "meta.declaration.bladeLang",
      "patterns": [
        {
          "include": "#strings"
        },
        {
          "include": "#comments"
        },
        {
          "match": "\\b(as)\\b",
          "name": "keyword.other.import.bladeLang"
        }
      ]
    },
    {
      "include": "#comments"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#anotations"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#constants-and-special-vars"
    },
    {
      "include": "#strings"
    }
  ],
  "repository": {
    "bladeLangdoc": {
      "patterns": [
        {
          "match": "(@[a-zA-Z_]+)",
          "captures": {
            "0": {
              "name": "variable.name.source.bladeLang"
            }
          }
        },
        {
          "match": "(`.*?`)",
          "captures": {
            "0": {
              "name": "variable.other.source.bladeLang"
            }
          }
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.bladeLang"
            }
          },
          "match": "\/\\*\\*\/",
          "name": "comment.block.empty.bladeLang"
        },
        {
          "include": "#comments-doc-oldschool"
        },
        {
          "include": "#comments-doc"
        },
        {
          "include": "#comments-inline"
        }
      ]
    },
    "comments-doc-oldschool": {
      "patterns": [
        {
          "begin": "\/\\*",
          "end": "\\*\/",
          "name": "comment.block.documentation.bladeLang",
          "patterns": [
            {
              "include": "#comments-doc-oldschool"
            },
            {
              "include": "#comments-block"
            },
            {
              "include": "#bladeLangdoc"
            }
          ]
        }
      ]
    },
    "comments-doc": {
      "patterns": [
        {
          "begin": "\/\\*",
          "while": "^\\s*\\*\/",
          "patterns": [
            {
              "include": "#bladeLangdoc"
            }
          ],
          "name": "comment.block.documentation.bladeLang"
        }
      ]
    },
    "comments-inline": {
      "patterns": [
        {
          "include": "#comments-block"
        },
        {
          "captures": {
            "1": {
              "name": "comment.line.double-slash.bladeLang"
            }
          },
          "match": "((#).*)$"
        }
      ]
    },
    "comments-block": {
      "patterns": [
        {
          "begin": "\/\\*",
          "end": "\\*\/",
          "name": "comment.block.bladeLang",
          "patterns": [
            {
              "include": "#comments-block"
            }
          ]
        }
      ]
    },
    "anotations": {
      "patterns": [
        {
          "match": "(@[a-zA-Z0-9_]+)",
          "name": "storage.type.annotation.bladeLang"
        },
        {
          "match": "([a-zA-Z0-9_]+:)",
          "name": "meta.structure.dictionary.key.bladeLang"
        },
        {
          "match": "('|\")([^a-zA-Z0-9_\\-])((?![*+?])(?:[^\\r\\n\\[\\/\\\\]|\\\\.|\\[(?:[^\\r\\n\\]\\\\]|\\\\.)*\\])+)\\2([imsxuADUJ]+)?\\1",
          "name": "string.regexp.bladeLang"
        }
      ]
    },
    "constants-and-special-vars": {
      "patterns": [
        {
          "match": "(?<!\\$)\\b(true|false|nil)\\b(?!\\$)",
          "name": "constant.language.bladeLang"
        },
        {
          "match": "((?<!\\$)\\b(self|parent)\\b(?!\\$)|(__[a-zA-Z_0-9]+__))",
          "name": "variable.language.bladeLang"
        },
        {
          "match": "(?<!\\$)\\b((0b[0-1]*)|(0c[0-7]*)|(0x[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b(?!\\$)",
          "name": "constant.numeric.bladeLang"
        },
        {
          "match": "(?<![a-zA-Z0-9_$])([_$]*[A-Z][a-zA-Z0-9_$]*)",
          "name": "support.class.bladeLang"
        },
        {
          "match": "([_$]*[a-z][a-zA-Z0-9_$]*)(<|\\(|\\s+=>)",
          "captures": {
            "1": {
              "name": "entity.name.function.bladeLang"
            }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "(?<!\\$)\\bas\\b(?!\\$)",
          "name": "keyword.cast.bladeLang"
        },
        {
          "match": "(?<!\\$)\\b(try|catch|finally|die)\\b(?!\\$)",
          "name": "keyword.control.catch-exception.bladeLang"
        },
        {
          "match": "(?<!\\$)\\b(break|when|continue|default|do|else|for|if|in|return|using|while|iter)\\b(?!\\$)",
          "name": "keyword.control.bladeLang"
        },
        {
          "match": "(?<!\\$)\\b(or|and|assert)\\b(?!\\$)",
          "name": "keyword.control.boolean.bladeLang"
        },
        {
          "match": "(?<!\\$)\\b(var|class|def)\\b(?!\\$)",
          "name": "keyword.declaration.bladeLang"
        },
        {
          "match": "(?<!\\$)\\b(is\\!?)\\b(?!\\$)",
          "name": "keyword.operator.bladeLang"
        },
        {
          "match": "\\?\\?",
          "name": "keyword.operator.conditional.bladeLang"
        },
        {
          "match": "(<<|>>|~|\\^|\\||&)",
          "name": "keyword.operator.bitwise.bladeLang"
        },
        {
          "match": "((&|\\^|\\||<<|>>?)=)",
          "name": "keyword.operator.assignment.bitwise.bladeLang"
        },
        {
          "match": "(==|!=|<<?=?|>>?=?|(\\.\\.\\.))",
          "name": "keyword.operator.comparison.bladeLang"
        },
        {
          "match": "(([+*/%-]|\\~)=)",
          "name": "keyword.operator.assignment.arithmetic.bladeLang"
        },
        {
          "match": "(=)",
          "name": "keyword.operator.assignment.bladeLang"
        },
        {
          "match": "(\\-\\-|\\+\\+)",
          "name": "keyword.operator.increment-decrement.bladeLang"
        },
        {
          "match": "(\\-|\\+|\\*|\\/|\\~\\/|%|\\*\\*)",
          "name": "keyword.operator.arithmetic.bladeLang"
        },
        {
          "match": "(!)",
          "name": "keyword.operator.binary.bladeLang"
        },
        {
          "match": "(?<!\\$)\\b(static)\\b(?!\\$)",
          "name": "storage.modifier.bladeLang"
        },
        {
          "match": "(?<!\\$)\\b(?:echo)\\b(?!\\$)",
          "name": "storage.type.primitive.bladeLang"
        }
      ]
    },
    "string-interp": {
      "patterns": [
        {
          "captures": {
            "2": {
              "name": "variable.parameter.bladeLang"
            },
            "3": {
              "name": "variable.parameter.bladeLang"
            }
          },
          "match": "\\$(\\{([^{}]+)\\})"
        },
        {
          "match": "\\\\.",
          "name": "constant.character.escape.bladeLang"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "(?<!\\|r)\"",
          "end": "\"",
          "name": "string.interpolated.double.bladeLang",
          "patterns": [
            {
              "match": "\\n",
              "name": "invalid.string.newline"
            },
            {
              "include": "#string-interp"
            }
          ]
        },
        {
          "begin": "(?<!\\|r)'",
          "end": "'",
          "name": "string.interpolated.single.bladeLang",
          "patterns": [
            {
              "match": "\\n",
              "name": "invalid.string.newline"
            },
            {
              "include": "#string-interp"
            }
          ]
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "match": ";",
          "name": "punctuation.semicolon.bladeLang"
        },
        {
          "match": ",",
          "name": "punctuation.comma.bladeLang"
        },
        {
          "match": "\n",
          "name": "punctuation.terminator.bladeLang"
        },
        {
          "match": "\\.",
          "name": "punctuation.dot.bladeLang"
        }
      ]
    }
  },
  "scopeName": "source.bladeLang"
}