{
  "class": {
    "prefix": "class",
    "body": "class $1 {\n  $1(){\n    $2\n  }\n}",
    "description": "class definition",
    "scope": "source.bladeLang"
  },
  "else": {
    "prefix": "else",
    "body": "else {\n  $1\n}",
    "description": "else clause",
    "scope": "source.bladeLang"
  },
  "for": {
    "prefix": "for",
    "body": "for $1 in $2 {\n  $3\n}",
    "description": "for loop",
    "scope": "source.bladeLang"
  },
  "if": {
    "prefix": "if",
    "body": "if $1 {\n  $2\n}",
    "description": "if statement",
    "scope": "source.bladeLang"
  },
  "import": {
    "prefix": "import",
    "body": "import $1",
    "description": "import statement",
    "scope": "source.bladeLang"
  },
  "while": {
    "prefix": "while",
    "body": "while $1 {\n  $2\n}",
    "description": "while loop",
    "scope": "source.bladeLang"
  },
  "do": {
    "prefix": "do",
    "body": "do {\n  $2\n} while $1\n",
    "description": "do...while loop",
    "scope": "source.bladeLang"
  },
  "iter": {
    "prefix": "iter",
    "body": "iter var $1 = 0; $2; $3 {\n  $4\n}",
    "description": "iter loop",
    "scope": "source.bladeLang"
  },
  "using": {
    "prefix": "using",
    "body": "using $1 {\n  when $2 {\n    $3\n  }\n}",
    "description": "iter loop",
    "scope": "source.bladeLang"
  },
  "def": {
    "prefix": "def",
    "body": "def $1($2) {\n  $3\n}",
    "description": "function definition",
    "scope": "source.bladeLang"
  },
  "var": {
    "prefix": "var",
    "body": "var $1 = $2",
    "description": "variable declaration",
    "scope": "source.bladeLang"
  },
  "assert": {
    "prefix": "assert",
    "body": "assert $1, \"$2\"",
    "description": "assert statement",
    "scope": "source.bladeLang"
  },
  "die": {
    "prefix": "die",
    "body": "die Exception('$1')",
    "description": "die statement",
    "scope": "source.bladeLang"
  },
  "static": {
    "prefix": "static",
    "body": "static $1($2) {\n  $3\n}",
    "description": "static method",
    "scope": "source.bladeLang"
  },
  "try": {
    "prefix": "try",
    "body": "try {\n  $1\n} catch Exception e {\n  $2\n} finally {\n  $3\n}",
    "description": "static method",
    "scope": "source.bladeLang"
  }
}